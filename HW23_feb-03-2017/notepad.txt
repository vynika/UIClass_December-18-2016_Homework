Q. 
1.basic css selectors:

Type selectors
This basic selector chooses all elements that matches the given name.
Syntax: eltname
Example: input will match any <input> element.


Class selectors
This basic selector chooses elements based on the value of their class attribute.
Syntax: .classname
Example: .index will match any element that has the class index (likely defined by a class="index" attribute or similar).


ID selectors
This basic selector chooses nodes based on the value of its id attribute. There should be only one element with a given ID in a document.
Syntax: #idname
Example: #toc will match the element that has the id toc (likely defined by a id="toc" attribute or similar).


Universal selectors
This basic selector chooses all nodes. It also exists in a one-namespace only and in an all-namespace variant too.
Syntax: * ns|* *|*
Example: * will match all the elements of the document.


Attribute selectors
This basic selector chooses nodes based on the value of one of its attributes.
Syntax: [attr] [attr=value] [attr~=value] [attr|=value] [attr^=value] [attr$=value] [attr*=value]
Example: [autoplay] will match all the elements that have the autoplay attribute set (to any value).

2. attribute based selectors:

Attribute selectors select an element using the presence of a given attribute or attribute value.

[attr]
Represents an element with an attribute name of attr.

[attr=value]
Represents an element with an attribute name of attr and whose value is exactly "value".

[attr~=value]
Represents an element with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly "value".

[attr|=value]
Represents an element with an attribute name of attr. Its value can be exactly “value” or can begin with “value” immediately followed by “-” (U+002D). It can be used for language subcode matches.

[attr^=value]
Represents an element with an attribute name of attr and whose first value is prefixed by "value".

[attr$=value]
Represents an element with an attribute name of attr and whose last value is suffixed by "value".

[attr*=value]
Represents an element with an attribute name of attr and whose value contains at least one occurrence of string "value" as substring.

[attr operator value i]
Adding an i (or I) before the closing bracket causes the value to be compared case-insensitively (for characters within the ASCII range).

3. child filter selector:

The :first-child CSS pseudo-class represents any element that is the first child element of its parent.

Syntax
How to read CSS syntax.
:first-child { style properties }


4.content filter selector:
ref: https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors


5. forms selector:


Syntax
<select form="form_id">
Attribute Values


form_id	: Specifies the form element the <select> element belongs to. The value of this attribute must be the id attribute of a <form> element in the same document.


6. hierarchy selector:

Child Selector (“parent > child”)
Selects all direct child elements specified by “child” of elements specified by “parent”.

Descendant Selector (“ancestor descendant”)
Selects all elements that are descendants of a given ancestor.

Next Adjacent Selector (“prev + next”)
Selects all next elements matching “next” that are immediately preceded by a sibling “prev”.

Next Siblings Selector (“prev ~ siblings”)
Selects all sibling elements that follow after the “prev” element, have the same parent, and match the filtering “siblings” selector.


7. jquery selector extensions:

jQuery has extended the CSS3 selectors with the following selectors. Because these selectors are jQuery extension and not part of the CSS specification, queries using them cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using these selectors, first select some elements using a pure CSS selector, then use .filter().

8. visibility filter selector:
Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.

Elements with visibility: hidden or opacity: 0 are considered visible, since they still consume space in the layout.

Elements that are not in a document are considered hidden; jQuery does not have a way to know if they will be visible when appended to a document since it depends on the applicable styles.

This selector is the opposite of the :hidden selector. So, every element selected by :visible isn't selected by :hidden and vice versa.

All option elements are considered hidden, regardless of their selected state.
